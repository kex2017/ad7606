// sdram_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2017.12.25.22:43:09

`timescale 1 ps / 1 ps
module sdram_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                  //                                clk_0_clk.clk
		input  wire        read_sdram_0_reset_reset_bridge_in_reset_reset, // read_sdram_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] read_sdram_0_avalon_master_address,             //               read_sdram_0_avalon_master.address
		output wire        read_sdram_0_avalon_master_waitrequest,         //                                         .waitrequest
		input  wire [1:0]  read_sdram_0_avalon_master_byteenable,          //                                         .byteenable
		input  wire        read_sdram_0_avalon_master_read,                //                                         .read
		output wire [15:0] read_sdram_0_avalon_master_readdata,            //                                         .readdata
		output wire        read_sdram_0_avalon_master_readdatavalid,       //                                         .readdatavalid
		input  wire [31:0] write_sdram_burst_0_avalon_master_address,      //        write_sdram_burst_0_avalon_master.address
		output wire        write_sdram_burst_0_avalon_master_waitrequest,  //                                         .waitrequest
		input  wire [7:0]  write_sdram_burst_0_avalon_master_burstcount,   //                                         .burstcount
		input  wire [1:0]  write_sdram_burst_0_avalon_master_byteenable,   //                                         .byteenable
		input  wire        write_sdram_burst_0_avalon_master_write,        //                                         .write
		input  wire [15:0] write_sdram_burst_0_avalon_master_writedata,    //                                         .writedata
		input  wire [31:0] write_sdram_burst_1_avalon_master_address,      //        write_sdram_burst_1_avalon_master.address
		output wire        write_sdram_burst_1_avalon_master_waitrequest,  //                                         .waitrequest
		input  wire [7:0]  write_sdram_burst_1_avalon_master_burstcount,   //                                         .burstcount
		input  wire [1:0]  write_sdram_burst_1_avalon_master_byteenable,   //                                         .byteenable
		input  wire        write_sdram_burst_1_avalon_master_write,        //                                         .write
		input  wire [15:0] write_sdram_burst_1_avalon_master_writedata,    //                                         .writedata
		input  wire [31:0] write_sdram_burst_2_avalon_master_address,      //        write_sdram_burst_2_avalon_master.address
		output wire        write_sdram_burst_2_avalon_master_waitrequest,  //                                         .waitrequest
		input  wire [7:0]  write_sdram_burst_2_avalon_master_burstcount,   //                                         .burstcount
		input  wire [1:0]  write_sdram_burst_2_avalon_master_byteenable,   //                                         .byteenable
		input  wire        write_sdram_burst_2_avalon_master_write,        //                                         .write
		input  wire [15:0] write_sdram_burst_2_avalon_master_writedata,    //                                         .writedata
		output wire [21:0] sdram_s1_address,                               //                                 sdram_s1.address
		output wire        sdram_s1_write,                                 //                                         .write
		output wire        sdram_s1_read,                                  //                                         .read
		input  wire [15:0] sdram_s1_readdata,                              //                                         .readdata
		output wire [15:0] sdram_s1_writedata,                             //                                         .writedata
		output wire [1:0]  sdram_s1_byteenable,                            //                                         .byteenable
		input  wire        sdram_s1_readdatavalid,                         //                                         .readdatavalid
		input  wire        sdram_s1_waitrequest,                           //                                         .waitrequest
		output wire        sdram_s1_chipselect                             //                                         .chipselect
	);

	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_waitrequest;                   // read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_waitrequest -> read_sdram_0_avalon_master_translator:uav_waitrequest
	wire   [1:0] read_sdram_0_avalon_master_translator_avalon_universal_master_0_burstcount;                    // read_sdram_0_avalon_master_translator:uav_burstcount -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [15:0] read_sdram_0_avalon_master_translator_avalon_universal_master_0_writedata;                     // read_sdram_0_avalon_master_translator:uav_writedata -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [31:0] read_sdram_0_avalon_master_translator_avalon_universal_master_0_address;                       // read_sdram_0_avalon_master_translator:uav_address -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_address
	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_lock;                          // read_sdram_0_avalon_master_translator:uav_lock -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_lock
	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_write;                         // read_sdram_0_avalon_master_translator:uav_write -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_write
	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_read;                          // read_sdram_0_avalon_master_translator:uav_read -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_read
	wire  [15:0] read_sdram_0_avalon_master_translator_avalon_universal_master_0_readdata;                      // read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdata -> read_sdram_0_avalon_master_translator:uav_readdata
	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_debugaccess;                   // read_sdram_0_avalon_master_translator:uav_debugaccess -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [1:0] read_sdram_0_avalon_master_translator_avalon_universal_master_0_byteenable;                    // read_sdram_0_avalon_master_translator:uav_byteenable -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;                 // read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> read_sdram_0_avalon_master_translator:uav_readdatavalid
	wire         rsp_xbar_mux_src_endofpacket;                                                                  // rsp_xbar_mux:src_endofpacket -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         rsp_xbar_mux_src_valid;                                                                        // rsp_xbar_mux:src_valid -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         rsp_xbar_mux_src_startofpacket;                                                                // rsp_xbar_mux:src_startofpacket -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [91:0] rsp_xbar_mux_src_data;                                                                         // rsp_xbar_mux:src_data -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [3:0] rsp_xbar_mux_src_channel;                                                                      // rsp_xbar_mux:src_channel -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         rsp_xbar_mux_src_ready;                                                                        // read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux:src_ready
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_waitrequest;            // write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_waitrequest -> write_sdram_burst_0_avalon_master_translator:uav_waitrequest
	wire   [8:0] write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_burstcount;             // write_sdram_burst_0_avalon_master_translator:uav_burstcount -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [15:0] write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_writedata;              // write_sdram_burst_0_avalon_master_translator:uav_writedata -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [31:0] write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_address;                // write_sdram_burst_0_avalon_master_translator:uav_address -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_address
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_lock;                   // write_sdram_burst_0_avalon_master_translator:uav_lock -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_lock
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_write;                  // write_sdram_burst_0_avalon_master_translator:uav_write -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_write
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_read;                   // write_sdram_burst_0_avalon_master_translator:uav_read -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_read
	wire  [15:0] write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_readdata;               // write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdata -> write_sdram_burst_0_avalon_master_translator:uav_readdata
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_debugaccess;            // write_sdram_burst_0_avalon_master_translator:uav_debugaccess -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [1:0] write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_byteenable;             // write_sdram_burst_0_avalon_master_translator:uav_byteenable -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;          // write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> write_sdram_burst_0_avalon_master_translator:uav_readdatavalid
	wire         rsp_xbar_mux_001_src_endofpacket;                                                              // rsp_xbar_mux_001:src_endofpacket -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         rsp_xbar_mux_001_src_valid;                                                                    // rsp_xbar_mux_001:src_valid -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         rsp_xbar_mux_001_src_startofpacket;                                                            // rsp_xbar_mux_001:src_startofpacket -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [91:0] rsp_xbar_mux_001_src_data;                                                                     // rsp_xbar_mux_001:src_data -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [3:0] rsp_xbar_mux_001_src_channel;                                                                  // rsp_xbar_mux_001:src_channel -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         rsp_xbar_mux_001_src_ready;                                                                    // write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_001:src_ready
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_waitrequest;            // write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_waitrequest -> write_sdram_burst_1_avalon_master_translator:uav_waitrequest
	wire   [8:0] write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_burstcount;             // write_sdram_burst_1_avalon_master_translator:uav_burstcount -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [15:0] write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_writedata;              // write_sdram_burst_1_avalon_master_translator:uav_writedata -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [31:0] write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_address;                // write_sdram_burst_1_avalon_master_translator:uav_address -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_address
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_lock;                   // write_sdram_burst_1_avalon_master_translator:uav_lock -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_lock
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_write;                  // write_sdram_burst_1_avalon_master_translator:uav_write -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_write
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_read;                   // write_sdram_burst_1_avalon_master_translator:uav_read -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_read
	wire  [15:0] write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_readdata;               // write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_readdata -> write_sdram_burst_1_avalon_master_translator:uav_readdata
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_debugaccess;            // write_sdram_burst_1_avalon_master_translator:uav_debugaccess -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [1:0] write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_byteenable;             // write_sdram_burst_1_avalon_master_translator:uav_byteenable -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_readdatavalid;          // write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> write_sdram_burst_1_avalon_master_translator:uav_readdatavalid
	wire         rsp_xbar_mux_002_src_endofpacket;                                                              // rsp_xbar_mux_002:src_endofpacket -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         rsp_xbar_mux_002_src_valid;                                                                    // rsp_xbar_mux_002:src_valid -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         rsp_xbar_mux_002_src_startofpacket;                                                            // rsp_xbar_mux_002:src_startofpacket -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [91:0] rsp_xbar_mux_002_src_data;                                                                     // rsp_xbar_mux_002:src_data -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [3:0] rsp_xbar_mux_002_src_channel;                                                                  // rsp_xbar_mux_002:src_channel -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         rsp_xbar_mux_002_src_ready;                                                                    // write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_002:src_ready
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_waitrequest;            // write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_waitrequest -> write_sdram_burst_2_avalon_master_translator:uav_waitrequest
	wire   [8:0] write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_burstcount;             // write_sdram_burst_2_avalon_master_translator:uav_burstcount -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire  [15:0] write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_writedata;              // write_sdram_burst_2_avalon_master_translator:uav_writedata -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_writedata
	wire  [31:0] write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_address;                // write_sdram_burst_2_avalon_master_translator:uav_address -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_address
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_lock;                   // write_sdram_burst_2_avalon_master_translator:uav_lock -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_lock
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_write;                  // write_sdram_burst_2_avalon_master_translator:uav_write -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_write
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_read;                   // write_sdram_burst_2_avalon_master_translator:uav_read -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_read
	wire  [15:0] write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_readdata;               // write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_readdata -> write_sdram_burst_2_avalon_master_translator:uav_readdata
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_debugaccess;            // write_sdram_burst_2_avalon_master_translator:uav_debugaccess -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire   [1:0] write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_byteenable;             // write_sdram_burst_2_avalon_master_translator:uav_byteenable -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_readdatavalid;          // write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> write_sdram_burst_2_avalon_master_translator:uav_readdatavalid
	wire         rsp_xbar_mux_003_src_endofpacket;                                                              // rsp_xbar_mux_003:src_endofpacket -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire         rsp_xbar_mux_003_src_valid;                                                                    // rsp_xbar_mux_003:src_valid -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:rp_valid
	wire         rsp_xbar_mux_003_src_startofpacket;                                                            // rsp_xbar_mux_003:src_startofpacket -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [91:0] rsp_xbar_mux_003_src_data;                                                                     // rsp_xbar_mux_003:src_data -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:rp_data
	wire   [3:0] rsp_xbar_mux_003_src_channel;                                                                  // rsp_xbar_mux_003:src_channel -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:rp_channel
	wire         rsp_xbar_mux_003_src_ready;                                                                    // write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_003:src_ready
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                             // sdram_s1_translator:uav_waitrequest -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [1:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                              // sdram_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sdram_s1_translator:uav_burstcount
	wire  [15:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                               // sdram_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sdram_s1_translator:uav_writedata
	wire  [31:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_address;                                 // sdram_s1_translator_avalon_universal_slave_0_agent:m0_address -> sdram_s1_translator:uav_address
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_write;                                   // sdram_s1_translator_avalon_universal_slave_0_agent:m0_write -> sdram_s1_translator:uav_write
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                    // sdram_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sdram_s1_translator:uav_lock
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_read;                                    // sdram_s1_translator_avalon_universal_slave_0_agent:m0_read -> sdram_s1_translator:uav_read
	wire  [15:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                                // sdram_s1_translator:uav_readdata -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                           // sdram_s1_translator:uav_readdatavalid -> sdram_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                             // sdram_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sdram_s1_translator:uav_debugaccess
	wire   [1:0] sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                              // sdram_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sdram_s1_translator:uav_byteenable
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                      // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                            // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                    // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [92:0] sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                             // sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                            // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                   // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                         // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                 // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [92:0] sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                          // sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                         // sdram_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                       // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [17:0] sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                        // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                       // sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket;          // read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid;                // read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket;        // read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [91:0] read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data;                 // read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire         read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready;                // addr_router:sink_ready -> read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         addr_router_src_endofpacket;                                                                   // addr_router:src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire         addr_router_src_valid;                                                                         // addr_router:src_valid -> cmd_xbar_demux:sink_valid
	wire         addr_router_src_startofpacket;                                                                 // addr_router:src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [91:0] addr_router_src_data;                                                                          // addr_router:src_data -> cmd_xbar_demux:sink_data
	wire   [3:0] addr_router_src_channel;                                                                       // addr_router:src_channel -> cmd_xbar_demux:sink_channel
	wire         addr_router_src_ready;                                                                         // cmd_xbar_demux:sink_ready -> addr_router:src_ready
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket;   // write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid;         // write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket; // write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [91:0] write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data;          // write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire         write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready;         // addr_router_001:sink_ready -> write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         addr_router_001_src_endofpacket;                                                               // addr_router_001:src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire         addr_router_001_src_valid;                                                                     // addr_router_001:src_valid -> cmd_xbar_demux_001:sink_valid
	wire         addr_router_001_src_startofpacket;                                                             // addr_router_001:src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [91:0] addr_router_001_src_data;                                                                      // addr_router_001:src_data -> cmd_xbar_demux_001:sink_data
	wire   [3:0] addr_router_001_src_channel;                                                                   // addr_router_001:src_channel -> cmd_xbar_demux_001:sink_channel
	wire         addr_router_001_src_ready;                                                                     // cmd_xbar_demux_001:sink_ready -> addr_router_001:src_ready
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket;   // write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_valid;         // write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket; // write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [91:0] write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_data;          // write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire         write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_ready;         // addr_router_002:sink_ready -> write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         addr_router_002_src_endofpacket;                                                               // addr_router_002:src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire         addr_router_002_src_valid;                                                                     // addr_router_002:src_valid -> cmd_xbar_demux_002:sink_valid
	wire         addr_router_002_src_startofpacket;                                                             // addr_router_002:src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [91:0] addr_router_002_src_data;                                                                      // addr_router_002:src_data -> cmd_xbar_demux_002:sink_data
	wire   [3:0] addr_router_002_src_channel;                                                                   // addr_router_002:src_channel -> cmd_xbar_demux_002:sink_channel
	wire         addr_router_002_src_ready;                                                                     // cmd_xbar_demux_002:sink_ready -> addr_router_002:src_ready
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket;   // write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_003:sink_endofpacket
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_valid;         // write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_003:sink_valid
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket; // write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_003:sink_startofpacket
	wire  [91:0] write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_data;          // write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_003:sink_data
	wire         write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_ready;         // addr_router_003:sink_ready -> write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent:cp_ready
	wire         addr_router_003_src_endofpacket;                                                               // addr_router_003:src_endofpacket -> cmd_xbar_demux_003:sink_endofpacket
	wire         addr_router_003_src_valid;                                                                     // addr_router_003:src_valid -> cmd_xbar_demux_003:sink_valid
	wire         addr_router_003_src_startofpacket;                                                             // addr_router_003:src_startofpacket -> cmd_xbar_demux_003:sink_startofpacket
	wire  [91:0] addr_router_003_src_data;                                                                      // addr_router_003:src_data -> cmd_xbar_demux_003:sink_data
	wire   [3:0] addr_router_003_src_channel;                                                                   // addr_router_003:src_channel -> cmd_xbar_demux_003:sink_channel
	wire         addr_router_003_src_ready;                                                                     // cmd_xbar_demux_003:sink_ready -> addr_router_003:src_ready
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                             // sdram_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                   // sdram_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                           // sdram_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [91:0] sdram_s1_translator_avalon_universal_slave_0_agent_rp_data;                                    // sdram_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire         sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                   // id_router:sink_ready -> sdram_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire         id_router_src_endofpacket;                                                                     // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire         id_router_src_valid;                                                                           // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire         id_router_src_startofpacket;                                                                   // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [91:0] id_router_src_data;                                                                            // id_router:src_data -> rsp_xbar_demux:sink_data
	wire   [3:0] id_router_src_channel;                                                                         // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire         id_router_src_ready;                                                                           // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire         cmd_xbar_mux_src_endofpacket;                                                                  // cmd_xbar_mux:src_endofpacket -> burst_adapter:sink0_endofpacket
	wire         cmd_xbar_mux_src_valid;                                                                        // cmd_xbar_mux:src_valid -> burst_adapter:sink0_valid
	wire         cmd_xbar_mux_src_startofpacket;                                                                // cmd_xbar_mux:src_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [91:0] cmd_xbar_mux_src_data;                                                                         // cmd_xbar_mux:src_data -> burst_adapter:sink0_data
	wire   [3:0] cmd_xbar_mux_src_channel;                                                                      // cmd_xbar_mux:src_channel -> burst_adapter:sink0_channel
	wire         cmd_xbar_mux_src_ready;                                                                        // burst_adapter:sink0_ready -> cmd_xbar_mux:src_ready
	wire         burst_adapter_source0_endofpacket;                                                             // burst_adapter:source0_endofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire         burst_adapter_source0_valid;                                                                   // burst_adapter:source0_valid -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire         burst_adapter_source0_startofpacket;                                                           // burst_adapter:source0_startofpacket -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [91:0] burst_adapter_source0_data;                                                                    // burst_adapter:source0_data -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire         burst_adapter_source0_ready;                                                                   // sdram_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire   [3:0] burst_adapter_source0_channel;                                                                 // burst_adapter:source0_channel -> sdram_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire         cmd_xbar_demux_src0_endofpacket;                                                               // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire         cmd_xbar_demux_src0_valid;                                                                     // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire         cmd_xbar_demux_src0_startofpacket;                                                             // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [91:0] cmd_xbar_demux_src0_data;                                                                      // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire   [3:0] cmd_xbar_demux_src0_channel;                                                                   // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire         cmd_xbar_demux_src0_ready;                                                                     // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire         cmd_xbar_demux_001_src0_endofpacket;                                                           // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire         cmd_xbar_demux_001_src0_valid;                                                                 // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire         cmd_xbar_demux_001_src0_startofpacket;                                                         // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [91:0] cmd_xbar_demux_001_src0_data;                                                                  // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire   [3:0] cmd_xbar_demux_001_src0_channel;                                                               // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire         cmd_xbar_demux_001_src0_ready;                                                                 // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire         cmd_xbar_demux_002_src0_endofpacket;                                                           // cmd_xbar_demux_002:src0_endofpacket -> cmd_xbar_mux:sink2_endofpacket
	wire         cmd_xbar_demux_002_src0_valid;                                                                 // cmd_xbar_demux_002:src0_valid -> cmd_xbar_mux:sink2_valid
	wire         cmd_xbar_demux_002_src0_startofpacket;                                                         // cmd_xbar_demux_002:src0_startofpacket -> cmd_xbar_mux:sink2_startofpacket
	wire  [91:0] cmd_xbar_demux_002_src0_data;                                                                  // cmd_xbar_demux_002:src0_data -> cmd_xbar_mux:sink2_data
	wire   [3:0] cmd_xbar_demux_002_src0_channel;                                                               // cmd_xbar_demux_002:src0_channel -> cmd_xbar_mux:sink2_channel
	wire         cmd_xbar_demux_002_src0_ready;                                                                 // cmd_xbar_mux:sink2_ready -> cmd_xbar_demux_002:src0_ready
	wire         cmd_xbar_demux_003_src0_endofpacket;                                                           // cmd_xbar_demux_003:src0_endofpacket -> cmd_xbar_mux:sink3_endofpacket
	wire         cmd_xbar_demux_003_src0_valid;                                                                 // cmd_xbar_demux_003:src0_valid -> cmd_xbar_mux:sink3_valid
	wire         cmd_xbar_demux_003_src0_startofpacket;                                                         // cmd_xbar_demux_003:src0_startofpacket -> cmd_xbar_mux:sink3_startofpacket
	wire  [91:0] cmd_xbar_demux_003_src0_data;                                                                  // cmd_xbar_demux_003:src0_data -> cmd_xbar_mux:sink3_data
	wire   [3:0] cmd_xbar_demux_003_src0_channel;                                                               // cmd_xbar_demux_003:src0_channel -> cmd_xbar_mux:sink3_channel
	wire         cmd_xbar_demux_003_src0_ready;                                                                 // cmd_xbar_mux:sink3_ready -> cmd_xbar_demux_003:src0_ready
	wire         rsp_xbar_demux_src0_endofpacket;                                                               // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire         rsp_xbar_demux_src0_valid;                                                                     // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire         rsp_xbar_demux_src0_startofpacket;                                                             // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [91:0] rsp_xbar_demux_src0_data;                                                                      // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire   [3:0] rsp_xbar_demux_src0_channel;                                                                   // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire         rsp_xbar_demux_src0_ready;                                                                     // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire         rsp_xbar_demux_src1_endofpacket;                                                               // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire         rsp_xbar_demux_src1_valid;                                                                     // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire         rsp_xbar_demux_src1_startofpacket;                                                             // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [91:0] rsp_xbar_demux_src1_data;                                                                      // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire   [3:0] rsp_xbar_demux_src1_channel;                                                                   // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire         rsp_xbar_demux_src1_ready;                                                                     // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire         rsp_xbar_demux_src2_endofpacket;                                                               // rsp_xbar_demux:src2_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire         rsp_xbar_demux_src2_valid;                                                                     // rsp_xbar_demux:src2_valid -> rsp_xbar_mux_002:sink0_valid
	wire         rsp_xbar_demux_src2_startofpacket;                                                             // rsp_xbar_demux:src2_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [91:0] rsp_xbar_demux_src2_data;                                                                      // rsp_xbar_demux:src2_data -> rsp_xbar_mux_002:sink0_data
	wire   [3:0] rsp_xbar_demux_src2_channel;                                                                   // rsp_xbar_demux:src2_channel -> rsp_xbar_mux_002:sink0_channel
	wire         rsp_xbar_demux_src2_ready;                                                                     // rsp_xbar_mux_002:sink0_ready -> rsp_xbar_demux:src2_ready
	wire         rsp_xbar_demux_src3_endofpacket;                                                               // rsp_xbar_demux:src3_endofpacket -> rsp_xbar_mux_003:sink0_endofpacket
	wire         rsp_xbar_demux_src3_valid;                                                                     // rsp_xbar_demux:src3_valid -> rsp_xbar_mux_003:sink0_valid
	wire         rsp_xbar_demux_src3_startofpacket;                                                             // rsp_xbar_demux:src3_startofpacket -> rsp_xbar_mux_003:sink0_startofpacket
	wire  [91:0] rsp_xbar_demux_src3_data;                                                                      // rsp_xbar_demux:src3_data -> rsp_xbar_mux_003:sink0_data
	wire   [3:0] rsp_xbar_demux_src3_channel;                                                                   // rsp_xbar_demux:src3_channel -> rsp_xbar_mux_003:sink0_channel
	wire         rsp_xbar_demux_src3_ready;                                                                     // rsp_xbar_mux_003:sink0_ready -> rsp_xbar_demux:src3_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) read_sdram_0_avalon_master_translator (
		.clk                      (clk_0_clk_clk),                                                                 //                       clk.clk
		.reset                    (read_sdram_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address              (read_sdram_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (read_sdram_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (read_sdram_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (read_sdram_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (read_sdram_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (read_sdram_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (read_sdram_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (read_sdram_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (read_sdram_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (read_sdram_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (read_sdram_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (read_sdram_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (read_sdram_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (read_sdram_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                  (read_sdram_0_avalon_master_read),                                               //                          .read
		.av_readdata              (read_sdram_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (read_sdram_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                          //               (terminated)
		.av_begintransfer         (1'b0),                                                                          //               (terminated)
		.av_chipselect            (1'b0),                                                                          //               (terminated)
		.av_write                 (1'b0),                                                                          //               (terminated)
		.av_writedata             (16'b0000000000000000),                                                          //               (terminated)
		.av_lock                  (1'b0),                                                                          //               (terminated)
		.av_debugaccess           (1'b0),                                                                          //               (terminated)
		.uav_clken                (),                                                                              //               (terminated)
		.av_clken                 (1'b1),                                                                          //               (terminated)
		.uav_response             (2'b00),                                                                         //               (terminated)
		.av_response              (),                                                                              //               (terminated)
		.uav_writeresponserequest (),                                                                              //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                          //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid    ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) write_sdram_burst_0_avalon_master_translator (
		.clk                      (clk_0_clk_clk),                                                                        //                       clk.clk
		.reset                    (read_sdram_0_reset_reset_bridge_in_reset_reset),                                       //                     reset.reset
		.uav_address              (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (write_sdram_burst_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (write_sdram_burst_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (write_sdram_burst_0_avalon_master_burstcount),                                         //                          .burstcount
		.av_byteenable            (write_sdram_burst_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_write                 (write_sdram_burst_0_avalon_master_write),                                              //                          .write
		.av_writedata             (write_sdram_burst_0_avalon_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                                 //               (terminated)
		.av_read                  (1'b0),                                                                                 //               (terminated)
		.av_readdata              (),                                                                                     //               (terminated)
		.av_readdatavalid         (),                                                                                     //               (terminated)
		.av_lock                  (1'b0),                                                                                 //               (terminated)
		.av_debugaccess           (1'b0),                                                                                 //               (terminated)
		.uav_clken                (),                                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                                //               (terminated)
		.av_response              (),                                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) write_sdram_burst_1_avalon_master_translator (
		.clk                      (clk_0_clk_clk),                                                                        //                       clk.clk
		.reset                    (read_sdram_0_reset_reset_bridge_in_reset_reset),                                       //                     reset.reset
		.uav_address              (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (write_sdram_burst_1_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (write_sdram_burst_1_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (write_sdram_burst_1_avalon_master_burstcount),                                         //                          .burstcount
		.av_byteenable            (write_sdram_burst_1_avalon_master_byteenable),                                         //                          .byteenable
		.av_write                 (write_sdram_burst_1_avalon_master_write),                                              //                          .write
		.av_writedata             (write_sdram_burst_1_avalon_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                                 //               (terminated)
		.av_read                  (1'b0),                                                                                 //               (terminated)
		.av_readdata              (),                                                                                     //               (terminated)
		.av_readdatavalid         (),                                                                                     //               (terminated)
		.av_lock                  (1'b0),                                                                                 //               (terminated)
		.av_debugaccess           (1'b0),                                                                                 //               (terminated)
		.uav_clken                (),                                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                                //               (terminated)
		.av_response              (),                                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) write_sdram_burst_2_avalon_master_translator (
		.clk                      (clk_0_clk_clk),                                                                        //                       clk.clk
		.reset                    (read_sdram_0_reset_reset_bridge_in_reset_reset),                                       //                     reset.reset
		.uav_address              (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (write_sdram_burst_2_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (write_sdram_burst_2_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (write_sdram_burst_2_avalon_master_burstcount),                                         //                          .burstcount
		.av_byteenable            (write_sdram_burst_2_avalon_master_byteenable),                                         //                          .byteenable
		.av_write                 (write_sdram_burst_2_avalon_master_write),                                              //                          .write
		.av_writedata             (write_sdram_burst_2_avalon_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                                 //               (terminated)
		.av_read                  (1'b0),                                                                                 //               (terminated)
		.av_readdata              (),                                                                                     //               (terminated)
		.av_readdatavalid         (),                                                                                     //               (terminated)
		.av_lock                  (1'b0),                                                                                 //               (terminated)
		.av_debugaccess           (1'b0),                                                                                 //               (terminated)
		.uav_clken                (),                                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                                //               (terminated)
		.av_response              (),                                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (22),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                      (clk_0_clk_clk),                                                       //                      clk.clk
		.reset                    (read_sdram_0_reset_reset_bridge_in_reset_reset),                      //                    reset.reset
		.uav_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sdram_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sdram_s1_write),                                                      //                         .write
		.av_read                  (sdram_s1_read),                                                       //                         .read
		.av_readdata              (sdram_s1_readdata),                                                   //                         .readdata
		.av_writedata             (sdram_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (sdram_s1_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (sdram_s1_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (sdram_s1_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (sdram_s1_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BEGIN_BURST           (73),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                          //       clk.clk
		.reset                   (read_sdram_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.av_address              (read_sdram_0_avalon_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (read_sdram_0_avalon_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (read_sdram_0_avalon_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (read_sdram_0_avalon_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (read_sdram_0_avalon_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (read_sdram_0_avalon_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (read_sdram_0_avalon_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (read_sdram_0_avalon_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (read_sdram_0_avalon_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (read_sdram_0_avalon_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (read_sdram_0_avalon_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_src_valid),                                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_src_data),                                                                  //          .data
		.rp_channel              (rsp_xbar_mux_src_channel),                                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_src_startofpacket),                                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_src_endofpacket),                                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_src_ready),                                                                 //          .ready
		.av_response             (),                                                                                       // (terminated)
		.av_writeresponserequest (1'b0),                                                                                   // (terminated)
		.av_writeresponsevalid   ()                                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BEGIN_BURST           (73),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                   (read_sdram_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.av_address              (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_001_src_valid),                                                                    //        rp.valid
		.rp_data                 (rsp_xbar_mux_001_src_data),                                                                     //          .data
		.rp_channel              (rsp_xbar_mux_001_src_channel),                                                                  //          .channel
		.rp_startofpacket        (rsp_xbar_mux_001_src_startofpacket),                                                            //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_001_src_endofpacket),                                                              //          .endofpacket
		.rp_ready                (rsp_xbar_mux_001_src_ready),                                                                    //          .ready
		.av_response             (),                                                                                              // (terminated)
		.av_writeresponserequest (1'b0),                                                                                          // (terminated)
		.av_writeresponsevalid   ()                                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BEGIN_BURST           (73),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                   (read_sdram_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.av_address              (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_002_src_valid),                                                                    //        rp.valid
		.rp_data                 (rsp_xbar_mux_002_src_data),                                                                     //          .data
		.rp_channel              (rsp_xbar_mux_002_src_channel),                                                                  //          .channel
		.rp_startofpacket        (rsp_xbar_mux_002_src_startofpacket),                                                            //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_002_src_endofpacket),                                                              //          .endofpacket
		.rp_ready                (rsp_xbar_mux_002_src_ready),                                                                    //          .ready
		.av_response             (),                                                                                              // (terminated)
		.av_writeresponserequest (1'b0),                                                                                          // (terminated)
		.av_writeresponsevalid   ()                                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BEGIN_BURST           (73),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent (
		.clk                     (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                   (read_sdram_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.av_address              (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_003_src_valid),                                                                    //        rp.valid
		.rp_data                 (rsp_xbar_mux_003_src_data),                                                                     //          .data
		.rp_channel              (rsp_xbar_mux_003_src_channel),                                                                  //          .channel
		.rp_startofpacket        (rsp_xbar_mux_003_src_startofpacket),                                                            //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_003_src_endofpacket),                                                              //          .endofpacket
		.rp_ready                (rsp_xbar_mux_003_src_ready),                                                                    //          .ready
		.av_response             (),                                                                                              // (terminated)
		.av_writeresponserequest (1'b0),                                                                                          // (terminated)
		.av_writeresponsevalid   ()                                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (73),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (76),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (77),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_ORI_BURST_SIZE_H      (91),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                                 //             clk.clk
		.reset                   (read_sdram_0_reset_reset_bridge_in_reset_reset),                                //       clk_reset.reset
		.m0_address              (sdram_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                   //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                   //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                    //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                             //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                 //                .channel
		.rf_sink_ready           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                 //       clk.clk
		.reset             (read_sdram_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	sdram_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (read_sdram_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                          //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                                  //       src.ready
		.src_valid          (addr_router_src_valid),                                                                  //          .valid
		.src_data           (addr_router_src_data),                                                                   //          .data
		.src_channel        (addr_router_src_channel),                                                                //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                          //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                             //          .endofpacket
	);

	sdram_mm_interconnect_0_addr_router addr_router_001 (
		.sink_ready         (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (write_sdram_burst_0_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                                     //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                                     //          .valid
		.src_data           (addr_router_001_src_data),                                                                      //          .data
		.src_channel        (addr_router_001_src_channel),                                                                   //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                                             //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                                                //          .endofpacket
	);

	sdram_mm_interconnect_0_addr_router addr_router_002 (
		.sink_ready         (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (write_sdram_burst_1_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                                     //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                                     //          .valid
		.src_data           (addr_router_002_src_data),                                                                      //          .data
		.src_channel        (addr_router_002_src_channel),                                                                   //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                                             //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                                                //          .endofpacket
	);

	sdram_mm_interconnect_0_addr_router addr_router_003 (
		.sink_ready         (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (write_sdram_burst_2_avalon_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.src_ready          (addr_router_003_src_ready),                                                                     //       src.ready
		.src_valid          (addr_router_003_src_valid),                                                                     //          .valid
		.src_data           (addr_router_003_src_data),                                                                      //          .data
		.src_channel        (addr_router_003_src_channel),                                                                   //          .channel
		.src_startofpacket  (addr_router_003_src_startofpacket),                                                             //          .startofpacket
		.src_endofpacket    (addr_router_003_src_endofpacket)                                                                //          .endofpacket
	);

	sdram_mm_interconnect_0_id_router id_router (
		.sink_ready         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdram_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                 //       src.ready
		.src_valid          (id_router_src_valid),                                                 //          .valid
		.src_data           (id_router_src_data),                                                  //          .data
		.src_channel        (id_router_src_channel),                                               //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                            //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (73),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (65),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (65),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1)
	) burst_adapter (
		.clk                   (clk_0_clk_clk),                                  //       cr0.clk
		.reset                 (read_sdram_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_xbar_mux_src_data),                          //          .data
		.sink0_channel         (cmd_xbar_mux_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_src_ready),                         //          .ready
		.source0_valid         (burst_adapter_source0_valid),                    //   source0.valid
		.source0_data          (burst_adapter_source0_data),                     //          .data
		.source0_channel       (burst_adapter_source0_channel),                  //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),            //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),              //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                     //          .ready
	);

	sdram_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_src_ready),                          //      sink.ready
		.sink_channel       (addr_router_src_channel),                        //          .channel
		.sink_data          (addr_router_src_data),                           //          .data
		.sink_startofpacket (addr_router_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (addr_router_src_endofpacket),                    //          .endofpacket
		.sink_valid         (addr_router_src_valid),                          //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                      //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),                       //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket)                 //          .endofpacket
	);

	sdram_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_001_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_001_src_channel),                    //          .channel
		.sink_data          (addr_router_001_src_data),                       //          .data
		.sink_startofpacket (addr_router_001_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_001_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_001_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_001_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)             //          .endofpacket
	);

	sdram_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux_002 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_002_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_002_src_channel),                    //          .channel
		.sink_data          (addr_router_002_src_data),                       //          .data
		.sink_startofpacket (addr_router_002_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_002_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_002_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_002_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_002_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_002_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_002_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_002_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)             //          .endofpacket
	);

	sdram_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux_003 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_003_src_ready),                      //      sink.ready
		.sink_channel       (addr_router_003_src_channel),                    //          .channel
		.sink_data          (addr_router_003_src_data),                       //          .data
		.sink_startofpacket (addr_router_003_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (addr_router_003_src_endofpacket),                //          .endofpacket
		.sink_valid         (addr_router_003_src_valid),                      //          .valid
		.src0_ready         (cmd_xbar_demux_003_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_xbar_demux_003_src0_valid),                  //          .valid
		.src0_data          (cmd_xbar_demux_003_src0_data),                   //          .data
		.src0_channel       (cmd_xbar_demux_003_src0_channel),                //          .channel
		.src0_startofpacket (cmd_xbar_demux_003_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_003_src0_endofpacket)             //          .endofpacket
	);

	sdram_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                         //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                         //          .valid
		.src_data            (cmd_xbar_mux_src_data),                          //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                       //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                      //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                    //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                       //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),                  //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),                  //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),                //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),                   //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),          //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),            //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src0_ready),                  //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src0_valid),                  //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src0_channel),                //          .channel
		.sink2_data          (cmd_xbar_demux_002_src0_data),                   //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src0_startofpacket),          //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src0_endofpacket),            //          .endofpacket
		.sink3_ready         (cmd_xbar_demux_003_src0_ready),                  //     sink3.ready
		.sink3_valid         (cmd_xbar_demux_003_src0_valid),                  //          .valid
		.sink3_channel       (cmd_xbar_demux_003_src0_channel),                //          .channel
		.sink3_data          (cmd_xbar_demux_003_src0_data),                   //          .data
		.sink3_startofpacket (cmd_xbar_demux_003_src0_startofpacket),          //          .startofpacket
		.sink3_endofpacket   (cmd_xbar_demux_003_src0_endofpacket)             //          .endofpacket
	);

	sdram_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                            //      sink.ready
		.sink_channel       (id_router_src_channel),                          //          .channel
		.sink_data          (id_router_src_data),                             //          .data
		.sink_startofpacket (id_router_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                      //          .endofpacket
		.sink_valid         (id_router_src_valid),                            //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                      //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                       //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                      //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                       //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_xbar_demux_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_xbar_demux_src2_valid),                      //          .valid
		.src2_data          (rsp_xbar_demux_src2_data),                       //          .data
		.src2_channel       (rsp_xbar_demux_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_xbar_demux_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_src2_endofpacket),                //          .endofpacket
		.src3_ready         (rsp_xbar_demux_src3_ready),                      //      src3.ready
		.src3_valid         (rsp_xbar_demux_src3_valid),                      //          .valid
		.src3_data          (rsp_xbar_demux_src3_data),                       //          .data
		.src3_channel       (rsp_xbar_demux_src3_channel),                    //          .channel
		.src3_startofpacket (rsp_xbar_demux_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket   (rsp_xbar_demux_src3_endofpacket)                 //          .endofpacket
	);

	sdram_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                         //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                         //          .valid
		.src_data            (rsp_xbar_mux_src_data),                          //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                       //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket)                 //          .endofpacket
	);

	sdram_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket)                 //          .endofpacket
	);

	sdram_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_002_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_002_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_002_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_002_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_002_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src2_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src2_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src2_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src2_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src2_endofpacket)                 //          .endofpacket
	);

	sdram_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (read_sdram_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_003_src_ready),                     //       src.ready
		.src_valid           (rsp_xbar_mux_003_src_valid),                     //          .valid
		.src_data            (rsp_xbar_mux_003_src_data),                      //          .data
		.src_channel         (rsp_xbar_mux_003_src_channel),                   //          .channel
		.src_startofpacket   (rsp_xbar_mux_003_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_003_src_endofpacket),               //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src3_ready),                      //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src3_valid),                      //          .valid
		.sink0_channel       (rsp_xbar_demux_src3_channel),                    //          .channel
		.sink0_data          (rsp_xbar_demux_src3_data),                       //          .data
		.sink0_startofpacket (rsp_xbar_demux_src3_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src3_endofpacket)                 //          .endofpacket
	);

endmodule
